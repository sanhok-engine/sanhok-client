// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYERZONEENTER_SANHOK_GAME_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PLAYERZONEENTER_SANHOK_GAME_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace sanhok {
namespace game {
namespace protocol {

struct PlayerZoneEnter;
struct PlayerZoneEnterBuilder;

struct PlayerZoneEnter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerZoneEnterBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ZONE_ID = 4,
    VT_ZONE_MULTICAST_ADDRESS = 6
  };
  uint32_t zone_id() const {
    return GetField<uint32_t>(VT_ZONE_ID, 0);
  }
  const ::flatbuffers::String *zone_multicast_address() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ZONE_MULTICAST_ADDRESS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ZONE_ID, 4) &&
           VerifyOffset(verifier, VT_ZONE_MULTICAST_ADDRESS) &&
           verifier.VerifyString(zone_multicast_address()) &&
           verifier.EndTable();
  }
};

struct PlayerZoneEnterBuilder {
  typedef PlayerZoneEnter Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_zone_id(uint32_t zone_id) {
    fbb_.AddElement<uint32_t>(PlayerZoneEnter::VT_ZONE_ID, zone_id, 0);
  }
  void add_zone_multicast_address(::flatbuffers::Offset<::flatbuffers::String> zone_multicast_address) {
    fbb_.AddOffset(PlayerZoneEnter::VT_ZONE_MULTICAST_ADDRESS, zone_multicast_address);
  }
  explicit PlayerZoneEnterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerZoneEnter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerZoneEnter>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerZoneEnter> CreatePlayerZoneEnter(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t zone_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> zone_multicast_address = 0) {
  PlayerZoneEnterBuilder builder_(_fbb);
  builder_.add_zone_multicast_address(zone_multicast_address);
  builder_.add_zone_id(zone_id);
  return builder_.Finish();
}

struct PlayerZoneEnter::Traits {
  using type = PlayerZoneEnter;
  static auto constexpr Create = CreatePlayerZoneEnter;
};

inline ::flatbuffers::Offset<PlayerZoneEnter> CreatePlayerZoneEnterDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t zone_id = 0,
    const char *zone_multicast_address = nullptr) {
  auto zone_multicast_address__ = zone_multicast_address ? _fbb.CreateString(zone_multicast_address) : 0;
  return sanhok::game::protocol::CreatePlayerZoneEnter(
      _fbb,
      zone_id,
      zone_multicast_address__);
}

inline const sanhok::game::protocol::PlayerZoneEnter *GetPlayerZoneEnter(const void *buf) {
  return ::flatbuffers::GetRoot<sanhok::game::protocol::PlayerZoneEnter>(buf);
}

inline const sanhok::game::protocol::PlayerZoneEnter *GetSizePrefixedPlayerZoneEnter(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<sanhok::game::protocol::PlayerZoneEnter>(buf);
}

inline bool VerifyPlayerZoneEnterBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<sanhok::game::protocol::PlayerZoneEnter>(nullptr);
}

inline bool VerifySizePrefixedPlayerZoneEnterBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<sanhok::game::protocol::PlayerZoneEnter>(nullptr);
}

inline void FinishPlayerZoneEnterBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<sanhok::game::protocol::PlayerZoneEnter> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerZoneEnterBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<sanhok::game::protocol::PlayerZoneEnter> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace protocol
}  // namespace game
}  // namespace sanhok

#endif  // FLATBUFFERS_GENERATED_PLAYERZONEENTER_SANHOK_GAME_PROTOCOL_H_
