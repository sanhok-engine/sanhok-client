// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYEREQUIPMENT_SANHOK_GAME_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PLAYEREQUIPMENT_SANHOK_GAME_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace sanhok {
namespace game {
namespace protocol {

struct PlayerEquipment;
struct PlayerEquipmentBuilder;

struct PlayerEquipment FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerEquipmentBuilder Builder;
  struct Traits;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PlayerEquipmentBuilder {
  typedef PlayerEquipment Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit PlayerEquipmentBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerEquipment> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerEquipment>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerEquipment> CreatePlayerEquipment(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  PlayerEquipmentBuilder builder_(_fbb);
  return builder_.Finish();
}

struct PlayerEquipment::Traits {
  using type = PlayerEquipment;
  static auto constexpr Create = CreatePlayerEquipment;
};

inline const sanhok::game::protocol::PlayerEquipment *GetPlayerEquipment(const void *buf) {
  return ::flatbuffers::GetRoot<sanhok::game::protocol::PlayerEquipment>(buf);
}

inline const sanhok::game::protocol::PlayerEquipment *GetSizePrefixedPlayerEquipment(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<sanhok::game::protocol::PlayerEquipment>(buf);
}

inline bool VerifyPlayerEquipmentBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<sanhok::game::protocol::PlayerEquipment>(nullptr);
}

inline bool VerifySizePrefixedPlayerEquipmentBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<sanhok::game::protocol::PlayerEquipment>(nullptr);
}

inline void FinishPlayerEquipmentBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<sanhok::game::protocol::PlayerEquipment> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerEquipmentBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<sanhok::game::protocol::PlayerEquipment> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace protocol
}  // namespace game
}  // namespace sanhok

#endif  // FLATBUFFERS_GENERATED_PLAYEREQUIPMENT_SANHOK_GAME_PROTOCOL_H_
